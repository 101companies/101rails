require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ChaptersController, type: :controller do
  let!(:book) { create(:book) }
  let(:user) { create(:user) }

  # This should return the minimal set of attributes required to create a valid
  # Chapter. As you add validations to Chapter, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    attributes_for(:chapter, book: book)
  end

  let(:invalid_attributes) do
    attributes_for(:invalid_chapter, book: book)
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ChaptersController. Be sure to keep this updated too.
  let(:valid_session) { { user_id: user.id } }

  describe 'GET #new' do
    it 'assigns a new chapter as @chapter' do
      get(:new, params: { book_id: book.id }, session: valid_session)

      expect(assigns(:chapter)).to be_a_new(Chapter)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested chapter as @chapter' do
      chapter = create(:chapter, book: book)

      get(:edit, params: { book_id: book.id, id: chapter.to_param }, session: valid_session)

      expect(assigns(:chapter)).to eq(chapter)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Chapter' do
        expect do
          post(:create, params: { book_id: book.id, chapter: valid_attributes }, session: valid_session)
        end.to change(Chapter, :count).by(1)
      end

      it 'assigns a newly created chapter as @chapter' do
        post(:create, params: { book_id: book.id, chapter: valid_attributes }, session: valid_session)

        expect(assigns(:chapter)).to be_a(Chapter)
        expect(assigns(:chapter)).to be_persisted
      end

      it 'redirects to the created chapter' do
        post(:create, params: { book_id: book.id, chapter: valid_attributes }, session: valid_session)

        expect(response).to redirect_to(edit_book_path(book))
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved chapter as @chapter' do
        post(:create, params: { book_id: book.id, chapter: invalid_attributes }, session: valid_session)

        expect(assigns(:chapter)).to be_a_new(Chapter)
      end

      it "re-renders the 'new' template" do
        post(:create, params: { book_id: book.id, chapter: invalid_attributes }, session: valid_session)

        expect(response).to render_template('new')
      end
    end
  end

  # describe "PUT #update" do
  #   context "with valid params" do
  #     let(:new_attributes) {
  #       attributes_for(:chapter)
  #     }
  #
  #     it "updates the requested chapter" do
  #       chapter = create(:chapter, book: book)
  #
  #       put(:update, params: { book_id: book.id, id: chapter.to_param, chapter: new_attributes }, session: valid_session)
  #       chapter.reload
  #
  #       expect(chapter.name).to eq(new_attributes[:name])
  #     end
  #
  #     it "assigns the requested chapter as @chapter" do
  #       chapter = create(:chapter, book: book)
  #
  #       put(:update, params: { book_id: book.id, id: chapter.to_param, chapter: valid_attributes }, session: valid_session)
  #
  #       expect(assigns(:chapter)).to eq(chapter)
  #     end
  #
  #     it "redirects to the chapter" do
  #       chapter = create(:chapter, book: book)
  #
  #       put(:update, params: { book_id: book.id, id: chapter.to_param, chapter: valid_attributes }, session: valid_session)
  #
  #       expect(response).to redirect_to(chapter)
  #     end
  #   end
  #
  #   context "with invalid params" do
  #     it "assigns the chapter as @chapter" do
  #       chapter = create(:chapter)
  #
  #       put(:update, params: { book_id: book.id, id: chapter.to_param, chapter: invalid_attributes }, session: valid_session)
  #
  #       expect(assigns(:chapter)).to eq(chapter)
  #     end
  #
  #     it "re-renders the 'edit' template" do
  #       chapter = create(:chapter)
  #
  #       put(:update, params: { book_id: book.id, id: chapter.to_param, chapter: invalid_attributes }, session: valid_session)
  #
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end
  #
  # describe "DELETE #destroy" do
  #   it "destroys the requested chapter" do
  #     chapter = Chapter.create! valid_attributes
  #     expect {
  #       delete :destroy, params: {id: chapter.to_param}, session: valid_session
  #     }.to change(Chapter, :count).by(-1)
  #   end
  #
  #   it "redirects to the chapters list" do
  #     chapter = Chapter.create! valid_attributes
  #     delete :destroy, params: {id: chapter.to_param}, session: valid_session
  #     expect(response).to redirect_to(chapters_url)
  #   end
  # end
end
